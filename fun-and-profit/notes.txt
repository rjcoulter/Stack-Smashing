Notes on "Smashing the Stack for Fun and Profit" by Aleph One

Introduction
- Explain what buffer overflows are and how they work
- Buffer -> Contiguous block of computer memory that holds multiple
  instances of some data type, associated with word buffer
  arrays
- Arrays can be either static or dynamic
  - Stacic -> allocated at load time on data segment
  - Dynamic -> allocated at run time on the stack
- We are concered only with overflows of dynamic buffers, ie 
  stack-based buffer overflows

Process Memory Organization
- Processes are divided into three regions
  - Text, Data, and Stack
- Text Region -> Fixed by the program, includes the code and 
  read only data, the text section of the executable file
  - Normally marked read only, any write attempt to it will cause a 
    segfault
- Data Region -> Contains intialized and unintialized data, static
  variables are stored in this region
  - Corresponds to the data-bss section of an executable file
  - Can use the brk(2) system call to change its size
- Stack Region -> Abstract data type, LIFO
  - Ie, last object put in the stack is the first removed
  - Two most important ops are push (add to top) and pop (remove from top)



                      /------------------\ lower
                      |                  | memory
                      |       Text       | addresses
                      |                  |
                      |------------------|
                      | (Initialized)    |
                      |       Data       |
                      | (Uninitialized)  |
                      |------------------|
                      |                  |
                      |     Stack        | higher
                      |                  | memory
                      \------------------/ addresses

Why use a Stack?
- Modern computers are designed with high level languages in mind
- Most important feature of these languages is the function (procedure)
  - Procedure call alters the flow of control like a jump
  - Unlike a jump, when finished, a function returns control to the 
    statement/instruction following the call
  - This abstraction is implemented with the help of a stack, the 
    stack dyanmically allocates local vars used in functions, pass
    parameters to the functions, and returns values from functions

The Stack Region
- Stack is a contiguous block of memory containing data
- Regsiter called the stack pointer (SP) points to the top of the stack
- The bottom of the stack is at a fixed address
- The size is dynamically adjusted by the kernel at run time
- CPU impements instructions to PUSH onto and POP off the stack
- The stack consists of logical stack frames that are pushed when
  calling a function, and then popped when returning 
  - Stack frames contains the parameters to a function, its local
    variables, and the data needed to recover the previous stack 
    frame, including the value of the instruction pointer at the time
    of a function call
- Stack grows up or down depending on implementation
- SP also depends on implementation, may point at the last address
  on the stack or the next available address
- Frame Pointer (FP) points to a fixed location within a frame,
  sometimes reffered to as a local base pointer (LB)
  - Local data when referenced by its offset from FP do not change
    with PUSHes and POPs, less overhead than using the offset from 
    the SP
  - Actual parameters have positive offsets and local variables
    have negative offsets from FP
- When a procedure is called (Procedure Prolog):
  - It saves the previous FP (to be restored at procedure exit)
  - It then copies SP into FP to create the new FP
  - It then advances SP to reserve space for local variables
- The clean up done after is the procedure epilog

Layout of memory from example1.c
- Memory can only be addressed in multiples of the word size
  - In our case (Linux x86) a word is 4 bytes, or 32 bits
- 5 byte buffer1 -> 8 bytes of memory
- 10 byte buffer2 -> 12 bytes of memory

bottom of                                                     top of
memory                                                        memory
        buffer2          buffer1   sfp   ret   a     b     c
<------ [              ][        ][    ][    ][    ][    ][    ]
top of                                                        bottom of
stack                                                         stack

Buffer Overflows
- The result of stuffing more data into a buffer than it can handle
- strcpy() copies the contents of larger_string into buffer until
  a null character is found on the string
- The buffer is 16 bytes long, and we are trying to stuff 256 bytes
  into it
- All 240 bytes in the stack after the buffer are being overwriten
- The return address will now be 0x41414141 (Hex character value of 'A' is 0x41)
  - This is outside the process address space, which is why when
    the function returns and tries to read the instruction from that
    address there is a segfault
- A buffer overflow lets us change the return address of a function,
  altering the flow of execution of the program

Stack layout from example2.c

bottom of                                                     top of
memory                                                        memory
         buffer        sfp   ret   *str     
<------ [            ][    ][    ][    ]   
top of                                                        bottom of
stack                                                         stack

Shell Code
- Now we can modify the return address and the flow of execution,
  what do we want to execute
  - Usually we would want to spawn a shell to issue commands we want
  - How do we place these instructions in the address space?
- Place the code you are trying to execute in the buffer that is
  being overflowed, and overwrite the return address so that it
  points back to the buffer
- Assuming the stack starts at address 0xFF, and that S stands for
  the code we want to execute it would look like this


bottom of   DDDDDDDDEEEEEEEEEEEE EEEE FFFF FFFF FFFF FFFF   top of
memory      89ABCDEF0123456789AB CDEF 0123 4567 89AB CDEF   memory

          buffer               sfp   ret    a     b     c
<------ [SSSSSSSSSSSSSSSSSSSS][SSSS][0xD8][0x01][0x02][0x03]
         ^                             |
         |_____________________________|
top of                                                      bottom of
stack                                                       stack

- Don't know where in the memory space of the program we are trying
  to exploit the shell code will be placed
- Need to place code we want to execute in the stack or the data
  segment, and trasnfer control to it
  - To do this you can place code in a global array in the data
    segment
- To get a hex representation of the binary code you can compile
  it then use gdb

Writing an Exploit
- We have 
  - shellcode, which we know must be in the string we use to 
    overflow the buffer
  - know we must point the return address back into the buffer
- If we try to guess the offset even if we know where the start
  of the stack lives it is nearly impossible
  - Problem is that we need to guess exactly where the address
    of our cdoe will start
  - If we are off by even one byte we will get a segfault or 
    invalid instruction
- We can use a NOP sled to pad the front of our overflow buffer
  with NOP instructions 
  - Almost all processors have a NOP instruction that performs
    a null operation, usually used to delay execution for 
    the purposes of timing
  - We will try to get the return address to point back to
    somwhere in the NOP sled, which will execute those until
    the shellcode is reached
- Good selection for our buffer size is about 100 bytes more 
  the the size of the buffer we are trying to overflow
  - Want to give space for NOPs, but still overwrite the return
    address with what we guess

bottom of   DDDDDDDDEEEEEEEEEEEE EEEE FFFF FFFF FFFF FFFF   top of
memory      89ABCDEF0123456789AB CDEF 0123 4567 89AB CDEF   memory

          buffer               sfp   ret    a     b     c
<------ [NNNNNNNNNNSSSSSSSSSS][SSSS][0xD8][0x01][0x02][0x03]
            ^                          |
            |__________________________|
top of                                                      bottom of
stack                                                       stack

Small Buffer Overflows
- Sometimes the buffer you want to overflow will be so small
  the shellcode wont fit, and the return address will be 
  overwriten with instructions instead of the address of our 
  code - or - the number of NOPs we can pad with will be so 
  small our chances of hitting it will be miniscule
- Have to use a different approach, which will only work
  if you have access to a program's environment variables
- Place the shellcode in an environment variable, and then overflow
  the buffer with the address of this variable in memory
  - You can make the environment variable holding the shell
    code as large as you want
  - Environment variables are stored in the top of the stack
    when the program is started, any modiviation by setenv()
    are then allocated elsewhere
- The stack at the beginning of a program looks like this
  <strings><argv pointers>NULL<envp pointers>NULL<argc><argv>envp>
- Our new program exploit4 will take an extra variable, the 
  size of the variable containing the shellcode and NOPs

Finding Buffer Overflows
- Buffer overflows are the result of stuffing more information
  into a buffer than it is meant to hold
- C does not have any built in bounds checking, so it often
  manifests as writing past the end of a character array
  - The C standard library provides a number of functions for
    copying or appending strings, that perform no bounds checking
    - strcat(), strcpy(), sprintf(); vsprintf()
  - These functions operate on null-terminated strings, and do
    not check for overflow of the recieving string
    - gets() is another function that reads a line from stdin
      into a buffer until either a terminating newline or EOF
- If the target of any of these functions is a buffer of static
  size, and its other argument was somehow derived from user
  input, there is a good chance a BO exploit exists
- Other mechanism seen is a while loop that reads characters in
  to some buffer until a certain delimeter is reached
- grep(1) is your friend
