Introduction
- Format string vulnerabilites are a new class that is much more
  dangerous than a commom buffer overflow
- Less prevelant than buffer overflows, but are easier to find
- Can also use automated tools to discover format string vulns
  - Can also detect for these vulnerabilites in applications
    that are only available as binaries

The format functions
- A format function is a special kind of ANSI C function, that takes
  a variable number of arguments
  - One of these arguments is the format string
  - The function evaluates the format string, while also accessing
    the other parameters given to the function
- Used to represent primitive C data types in a human readable
  string convention
- If an attacker can provide the format string to an ANSI C format
  function in part or as a whole, you are in trouble
  - By doing so the behavoir of the format function is changed, and
    the attacker may be able to get control over the target
    application
- A number of format functions are defined in the ANSI C definition,
  the ones below are part of the standard

  - fprintf -> prints to a FILE stream
  - printf -> prints to the 'stdout' stream
  - sprintf -> prints into a string
  - snprintf -> prints into a string with length checking
  - vfprintf -> print to a FILE stream from a va_arg structure
  - vprintf -> prints to 'stdout' from a va_arg structure
  - vsprintf -> prints to a string from a va_arg structure
  - vsnprintf -> prints to a string with length checking from a 
                 va_arg structure

- To understand where this vuln is common, we must see why we would
  use format string functions
  - Convert simple C datatypes to a string representation
  - Allow to specify the format of the representation
  - Process the resulting string
- How it works
  - The format string controls the behavoir of the function, ie it
    specifies the type of parameters that should be printed
  - Paramters are saved on the stack (pushed)
  - Saved either directly (by value) or indirectly (by reference)
- The calling function
  - Has to know how many parameters it pushes to the stack, since
    it has to do the stack correction when the format string
    returns

What is a format string
- A format string is an ASCIIZ string that contains text and format
  parameters
  - ex) printf("The magic number is: %d\n", 1911);
  - The intial text will be printed followed by a format parameter
    '%d' that is replaced with the paramter (1911) in the output
- The '\' is used to escape special characters, and is replaced by 
  the C compiler at compile-time, replacing the escape sequence
  by the appropriate character in the binary
  - The format functions do not recognize those special sequences,
    but they are sometimes mixed up, for instance the line below works
    because '\x25' is replaced at comiple time with '%', since 0x25
    is the ASCII value for the percent character 
    - ex) printf("The magic number is \x25\n", 23);

The stack and format strings
- The behavoir of the format function is controlled by the format
  string
- The function retrievesr the parameters requested by the format
  string from the stack
- Below is an example call and what the stack would look like
  from within the printf function

  printf("Number %d has no address, number %d has : %08x\n", i, a, &a);

        Stack Top
        ...
        <&a> -> address of the varaible i
        <a> -> value of the variable a
        <i> -> value of the variable i
        A -> address of format string
        ...
        Stack Bottom

- The format function parses the format string 'A' reading a char at
  a time
  - If it is not '%', the character is copied to the output
  - If it is, the character behind the '%' specifies the type of
    parameter that should be evaluated
  - The string "%%" has a special meaning, and is used to print the
    escape character '%' itself
    - Every other parameter relates to data which is located on
      the stack

Format string vulnerabilities
