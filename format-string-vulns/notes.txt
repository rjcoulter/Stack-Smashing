Introduction
- Format string vulnerabilites are a new class that is much more
  dangerous than a commom buffer overflow
- Less prevelant than buffer overflows, but are easier to find
- Can also use automated tools to discover format string vulns
  - Can also detect for these vulnerabilites in applications
    that are only available as binaries

The format functions
- A format function is a special kind of ANSI C function, that takes
  a variable number of arguments
  - One of these arguments is the format string
  - The function evaluates the format string, while also accessing
    the other parameters given to the function
- Used to represent primitive C data types in a human readable
  string convention
- If an attacker can provide the format string to an ANSI C format
  function in part or as a whole, you are in trouble
  - By doing so the behavoir of the format function is changed, and
    the attacker may be able to get control over the target
    application
- A number of format functions are defined in the ANSI C definition,
  the ones below are part of the standard

  - fprintf -> prints to a FILE stream
  - printf -> prints to the 'stdout' stream
  - sprintf -> prints into a string
  - snprintf -> prints into a string with length checking
  - vfprintf -> print to a FILE stream from a va_arg structure
  - vprintf -> prints to 'stdout' from a va_arg structure
  - vsprintf -> prints to a string from a va_arg structure
  - vsnprintf -> prints to a string with length checking from a 
                 va_arg structure

- To understand where this vuln is common, we must see why we would
  use format string functions
  - Convert simple C datatypes to a string representation
  - Allow to specify the format of the representation
  - Process the resulting string
- How it works
  - The format string controls the behavoir of the function, ie it
    specifies the type of parameters that should be printed
  - Paramters are saved on the stack (pushed)
  - Saved either directly (by value) or indirectly (by reference)
- The calling function
  - Has to know how many parameters it pushes to the stack, since
    it has to do the stack correction when the format string
    returns

What is a format string
- A format string is an ASCIIZ string that contains text and format
  parameters
  - ex) printf("The magic number is: %d\n", 1911);
  - The intial text will be printed followed by a format parameter
    '%d' that is replaced with the paramter (1911) in the output
- The '\' is used to escape special characters, and is replaced by 
  the C compiler at compile-time, replacing the escape sequence
  by the appropriate character in the binary
  - The format functions do not recognize those special sequences,
    but they are sometimes mixed up, for instance the line below works
    because '\x25' is replaced at comiple time with '%', since 0x25
    is the ASCII value for the percent character 
    - ex) printf("The magic number is \x25\n", 23);

The stack and format strings
- The behavoir of the format function is controlled by the format
  string
- The function retrievesr the parameters requested by the format
  string from the stack
- Below is an example call and what the stack would look like
  from within the printf function

  printf("Number %d has no address, number %d has : %08x\n", i, a, &a);

        Stack Top
        ...
        <&a> -> address of the varaible i
        <a> -> value of the variable a
        <i> -> value of the variable i
        A -> address of format string
        ...
        Stack Bottom

- The format function parses the format string 'A' reading a char at
  a time
  - If it is not '%', the character is copied to the output
  - If it is, the character behind the '%' specifies the type of
    parameter that should be evaluated
  - The string "%%" has a special meaning, and is used to print the
    escape character '%' itself
    - Every other parameter relates to data which is located on
      the stack

Format string vulnerabilities
- Generic class of a format string vulnerability is a 'channeling
  problem'
  - This type of vulnerability can appear if two different types
    of information channels are merged into one, and special escape
    characters or sequences are used to distinguish which channel is
    currently active
  - Usually one channel is a data channel, which is not parsed 
    actively but just copied, which the other channel is a controlling
    channel
- If the attacker is able to supply input that is used in one 
  channel this becomes a problem
- Typically two situations where format string vulnerabilites
  can arise, shown in example1.c
  - One -> Vuln is in the second param to the syslog function, the
    format string is partially usersupplied
  - Two -> Partly or completely usersupplied string is passed 
    indirectly to a format function

    int Error (char *fmt, ...);
    
    ...
    int someotherfunc (char *user) {
      ...
      Error(user);
      ...
    }
    ...
- Vulnerabilities of the first type are able to be detected by automated
  tools like pscan, but the second type can only be found if the tool
  knows 'Error' is used like a format function

What do we control now
- By supplying the format string we contorl the behavoir of the 
  format function
- Have to examine what we are able to control, or how to use this 
  partial control to extend to full control over the execution flow
  of the process

Crash the program
- A simple attack is to make the program crash
  - Can be useful to crash a daemon that dumps core and there may
    be some userful data within the coredump
- At nearly all UNIX systems illegal pointer accesses are caught
  by the kernel and the process will send a SIGSEV signal
  - The program is then normally terminated and dumps core
- Can use format strings to easily trigger some invalid pointer
  access by supplying a string like the one shown below

    printf ("%s%s%s%s%s%s%s%s%s%s%s%s");

- '%s' displays memory from an address that is supplied on the stack,
  where a lot of other data is stored as well, our chances are high
  to read from a illegal address that is not mapped
- Most format functions offer the '%n' parameter which can be used
  to write to addresses on the stack
  - In similar fashion if that is done a few times there is a high
    likelihood the program will crash

Viewing the process memory
- If we can see the reply of the format function -- the output string --,
  we can gather useful information from it as it is the output of 
  the behavior that we control
  - Can see what our string does and how the process layout looks
  - Can get offsets for real exploitation or reconstruct stack
    frames of the target process

    printf ("%08x.%08x.%08x.%08x.%08x\n");

- The function above will retrieve five parameters from the stack
  and display them as 8-digit padded hex numbers, the output may look
  something like "40012980.080628c4.bffff7a4.00000005.08059c04"
- This is a partial dump of the stack memory, starting from the 
  current bottom upwards to the top of the stack (assuming the stack
  grows towards the low addresses)
- Information on the stack gives important information about the
  program flow and local function variables that may be helpful for
  finding the offests needed to craft an exploit
- Can also look at memory locations different from the stack memory
  - To do this we have to get the format function to display memory
    from an address that we an supply, which gives us two problems
    1) Need to find a format parameter which uses an address by 
       reference as stack paramter and displays memory from there
    2) What address and how do we supply it
- '%s' parameter does what we want, displays memory from a stack
  supplied address
  - With that, how do we get that address on the stack, into the 
    right place
- The format string is usually located on the stack itself, so we 
  have nearly full control over the space where the format string lies
- The format function internally maintains a pointer to the stack
  location of the current format parameter
  - If we can get this pointer pointing into a memory space we
    control, we can supply an address to the '%s' parameter
- We can modify the stack pointer buy using dummy parameters to 'dig'
  up the stack by printing junk 

  printf ("AAA0AAA1_%08x.%08x.%08x.%08x.%08x");

- The '%08x' parameters increast the internal stack pointer of the 
  format function to the top of the stack, we can get it to point
  into our memory, the format string itself
- The format function always maintains the lowest stack frame, so
  if our buffer lies on the stack at all, it lies above the current
  stack pointer
- If we choose the number of '%0x8' parameters correctly, we can 
  display memory from an arbitrary address by appending '%s' to our
  string

  address = 0x08480110
  address (encoded as 32 bit le string): "\x10\x01\x48\x08"
  printf ("\x10\x01\x48\x08_%08x.%08x.%08x.%08x.%08x|%s|");

- Something like above will dump memory from 0x08480110 until a NULL
  byte is reached
- We can map out the entire process space by increasing the memory 
  address dynamically

Overwriting Arbitrary Memory
- The holy grail is to take control of the instruction pointer in
  a process
- The IP is often a register in the CPU and cannot be directly modified
  since only machine instructions can change it
- Need to find instructions that modify the IP and take influence
  on how those instructions modify it
- First a saved IP is overwritten, and then the program executes
  legitamite instructions that transfer control to a attacker supplied
  address

Exploiting similar to common BO
- Format string vulns sometimes offer a way around buffer length
  limitations and allow BO like exploits, as shown in example one
- We can supply a special format string to circumvent the '400%s'
  limitation

  "%497d\x3c\xd3\xff\xbf<nops><shellcode>"

- In normal BO we overwrite the return address of a function frame
  on the stack, as the function that owns that frame returns it will
  return to our supplied address

Exploitation with pure format strings
- Sometimes can't extend buffer b/c program uses functions that 
  have bounds checking
- We must extend our limited control (the ability to control the 
  behavior of the format function) to real execution control, the 
  ability to execute our raw machine code (func3 in example1.c)
  - snprintf will not let us exceed the buffer length
- '%n' parameter writes the number of bytes that have been written
  to a variable of our choice
  - The address of the variable is given to the format function
    by placing an integer pointer as a parameter onto the stack
- Knowing this, we can now write to arbitrary locations in memory
  similar to how we read from arbitrary locations above
- The format string below will overwrite four bytes at 0xbfffc8c0 
  with a small integer number

  "\xc0\xc8\xff\xbf_%08x.%08x.%08x.%08x.%08x.%n"

- We have one of our goals, to write to an arbitrary address, but
  we still need to get control oer the number we are writing
  - The number we write, the count of characters written by the format
    function, is dependant on the format string
  - Since we control the format string, we have at least some control
    on this counter by writing more or less bytes
- Integer numbers on x86 architecture is stored in four bytes, which
  are little endian ordered, ie the least significatn byte is the
  first in memory
  - ex) 0x0000014c is stored in memory as "\x4c\x01\x00\x00"
- For the counter to the format function we can control the least
  significant byte by using the dummy %nu parameters to modify it
- For an address, there are four bytes we must control completely
  - Either do all at once or write a byte a time four times in a row,
    which will look something like below


    unsigned char canary[5];
    unsigned char foo[4];

    memset (foo, ’\x00’, sizeof (foo));
    /* 0 * before */ strcpy (canary, "AAAA");

    /* 1 */ printf ("%16u%n", 7350, (int *) &foo[0]);
    /* 2 */ printf ("%32u%n", 7350, (int *) &foo[1]);
    /* 3 */ printf ("%64u%n", 7350, (int *) &foo[2]);
    /* 4 */ printf ("%128u%n", 7350, (int *) &foo[3]);

    /* 5 * after */ printf ("%02x%02x%02x%02x\n", foo[0], foo[1],
    foo[2], foo[3]);
    printf ("canary: %02x%02x%02x%02x\n", canary[0],
    canary[1], canary[2], canary[3])
  
  - This will return the output "10204080" and "00000041"
- We overwrite four times past the least signifcant byte of an 
  integer we point to
  - A side effect is that we will be overwriting memory we do not
    want to

Variations of Exploitation
- Many ways to acomplish exploitation

Short Write
- Can overwrite an address with just two write operations
  - Use the '%hn' operation, which writes short int types
- This technique does not destroy data outside of the address that
  is being overwriting
- Generally avoid this as it is dependant on the behavior of the 
  format function
- Also it may not be very portable between different systems

Stack Popping
- Problems can occur if the format string is too short to supply a 
  stack popping sequence that will reach your own string
  - As such there is a demand for a method to increase the SP
    with as few bytes as possible
- We have used '%u', which is two bytes long and pops 4 bytes
  - Can use others such as '%f' which are also two bytes long
    but will pop off 8 bytes

Direct Parameter Access
- Way to directly address a stack parameter from within a format
  string
  - Almost all currently in use C libraries do support this feature,
    but not all are usable to apply this method to format string 
    exploitation
- Controlled by the '$' qualifier

Brute Forcing
- The last hurdle with format string vulns and BO is to get the offset right
  - Essentially: What to write where
- If you need mulitple offsets this can get pretty hard
- With format string this problem comes up with daemons or any program
  that will only give you one try to
- Typically falls into two camps, respsonse based
  or blind brute forcing
